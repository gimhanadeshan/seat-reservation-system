
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" 
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  reservations Reservation[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Seat {
  id          String  @id @default(cuid())
  seatNumber  String  @unique
  location    String
  hasMonitor  Boolean @default(false)
  isActive    Boolean @default(true)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reservations Reservation[]

  @@map("seats")
}

model Reservation {
  id        String            @id @default(cuid())
  userId    String
  seatId    String
  date      DateTime
  startTime String?
  endTime   String?
  status    ReservationStatus @default(ACTIVE)
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  seat Seat @relation(fields: [seatId], references: [id], onDelete: Cascade)

  @@unique([seatId, date])
  @@map("reservations")
}

enum Role {
  USER
  ADMIN
}

enum ReservationStatus {
  ACTIVE
  CANCELLED
  COMPLETED
}